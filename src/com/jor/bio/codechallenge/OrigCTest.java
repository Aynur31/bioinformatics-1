package com.jor.bio.codechallenge;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import junit.framework.Assert;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Testing Origin of Replic DNA Algorithms.
 * @author jrquinones
 *
 */
public class OrigCTest {
	
	@BeforeClass
	public static void setUpClass() {
		
	}
	
	@Before
	public void setUp() {
	}

	@After
	public void shutDown() {
	}
	
	@Test
	public void testPatternCount() {
		String input = "CGCTTCATCCTTCATCAGCTTCATCGCTTCATCCCTTCTTCATCAAGCTGGGAGCTTCATCGCCTTCATCCATCCGGAGAACCATACTTCATCCTTCATCGCTCCTTCATCTTCCTTGCTTCATCACCTTCATCCTCTTCATCTCTTCATCCTTCATCCTTCATCACCTTCATCGTAGCTTCATCGTAGCCTTCATCGCCCTTCATCGCTTCATCATCTTCATCTCTTCATCCTTCATCGGAGACTCAATCGACGATTACGGGCTTCATCCCTTCATCGTCACCCCCCATGGATCCTTCATCCTGCTTCATCCTTCATCGACTTCATCCCAAGGCCTTCATCGGAACCTTCATCCTTCATCCTTCATCAGTCTTCATCGCTTCATCCTTCATCGCCTTCATCGGCTTCATCTCCTGTGACCTTCATCGTTCCCCTTATCTTCATCACTTCATCGTATTGGCTGGCTTCATCACTTCATCCTTCATCACTTCATCTGACGCTTCATCGCTCTCGGCTTCATCCTTCATCCTTCATCACTTCATCGCTTCATCCTTCATCGGATGTTCAGACTTCATCCTTCATCCTTCATCACTTCATCTAGACCTTCATCGGTTCTTCATCGACTACTTCATCGTCGCTTCATCCACAAGGTCCCTTCATCCTTCATCCTTCATCCTTCATCCCTTCATCCATTCTTCATCTTCTTCATCCTTCATCCCTTCATCCGAGCTAGTAGCTTCATCAACTTCATCCCTTCATCCACTTCATCACGTTCTTCATCTTAACTTCATCCTTCATCCTTCATCCCTCCACTTCATCACTTCATCACACCTTCATCCTTCATCCTTCATCCTCGAACGCGCTTCATCCTTCATCTCTTCATCTCTTCATCTCTCCGCTTCATCTGTGCGCCTTCATCCGGATAAACTTCATCCAGAACTTCATCCTTCATCCTTCATCCTTCTTCATCGGCCTTCATCCCCAATTTCCTTCATCAGACTTCATCTCTTCATCTCTTCATCCTTCATCCTTCATCTG";
		String pattern = "CTTCATCCT";
		Assert.assertEquals(32, patternCount(input, pattern));
	}
	
	@Test
	public void testFrequentWords() {
		String input = "ACGTTGCATGTCGCATGATGCATGAGAGCT";
		int k = 4;
		String [] expectedOutput = {"CATG", "GCAT"};
		
		List<String> output = frequentWords(input, k);
		
		Assert.assertEquals(2, output.size());
		Assert.assertTrue(output.contains(expectedOutput[0]));
		Assert.assertTrue(output.contains(expectedOutput[1]));
		
		input = "CGAATTAGCGCGGGTTTTCGAATTAGCGAATTAGCGAATTAGCGAATTAGTTCACCATCCGAATTAGCGCGGGTTTTCGAATTAGAGAATTCCTATTACCTTCGCGGGTTTTATTACCTTTTCACCATCAGAATTCCTAGAATTCCTATTACCTTTTCACCATCCGCGGGTTTTATTACCTTATTACCTTTTCACCATCCGCGGGTTTTATTACCTTATTACCTTATTACCTTTTCACCATCATTACCTTATTACCTTCGCGGGTTTTTTCACCATCTTCACCATCTTCACCATCATTACCTTCGAATTAGAGAATTCCTCGAATTAGCGCGGGTTTTCGAATTAGCGAATTAGTTCACCATCAGAATTCCTCGAATTAGATTACCTTCGCGGGTTTTTTCACCATCCGAATTAGAGAATTCCTTTCACCATCCGAATTAGTTCACCATCATTACCTTATTACCTTCGCGGGTTTTAGAATTCCTCGAATTAGTTCACCATCTTCACCATCATTACCTTTTCACCATCCGCGGGTTTTATTACCTTCGCGGGTTTTTTCACCATCCGAATTAGAGAATTCCTCGAATTAGTTCACCATCTTCACCATCAGAATTCCTAGAATTCCTATTACCTTTTCACCATCTTCACCATCCGCGGGTTTTAGAATTCCTCGCGGGTTTTCGAATTAGATTACCTTCGAATTAGCGAATTAGTTCACCATCCGAATTAGATTACCTTTTCACCATCCGCGGGTTTTCGAATTAGCGCGGGTTTTCGCGGGTTTTCGCGGGTTTTCGCGGGTTTTCGAATTAGCGAATTAGAGAATTCCTCGCGGGTTTTAGAATTCCTATTACCTTATTACCTTTTCACCATCATTACCTTAGAATTCCTTTCACCATCCGCGGGTTTTAGAATTCCTCGCGGGTTTT";
		k = 11;
		output = frequentWords(input, k);
		System.out.println("testFrequentWords Output");
		System.out.println(output);
		
	}
	
	@Test
	public void testReverseComplement() {
		String input = "AAAACCCGGT";
		String expectedOutput = "ACCGGGTTTT";
		
		Assert.assertEquals(expectedOutput, reverseComplementPattern(input));
		
		input = readDataSet("dataset_3_2.txt");
		
		String output = reverseComplementPattern(input);
		System.out.println("testReverseComplement Output");
//		for (int i = 0; i < output.length(); i++) {
//			System.out.print(output.charAt(i));
//		}
	}
	
	@Test
	public void testPatternMatching() {
		String sampleInput = "GATATATGCATATACTT";
		String samplePattern = "ATAT";

		List<Integer> expected = patternMatching(sampleInput, samplePattern);
		Assert.assertEquals(3, expected.size());
		Assert.assertTrue(expected.contains(1));
		Assert.assertTrue(expected.contains(3));
		Assert.assertTrue(expected.contains(9));
		
		for (Integer integer : expected) {
			System.out.print(integer + " ");
		}
		
		sampleInput = readDataSet("Vibrio_cholerae.txt");
		samplePattern = "CTTGATCAT";
		expected = patternMatching(sampleInput, samplePattern);
		System.out.println("Complete sample test:");
		for (Integer integer : expected) {
			System.out.print(integer + " ");
		}
	}
	
	@Test
	public void testClumpFinding() {
		int L = 30;
		int K = 4;
		int t = 3;
		String input = "CCGACAGGCTAGTCTATAATCCTGAGGCGTTACCCCAATACCGTTTACCGTGGGATTTGCTACTACAACTCCTGAGCGCTACATGTACGAAACCATGTTATGTAT"; //readDataSet("E-coli.txt");
		System.out.println("\nClump finding test:");
		List<String> rto = clumpFinding(input, L, K, t);
		
		for (String string : rto) {
			System.out.print(string + " ");
		}
		System.out.println("");
	}
	
	@Test
	public void testSkew() {
		System.out.println(skew("GATACACTTCCCAGTAGGTACTG", 14));
		
		System.out.println("MINIMUM SKEW for a genome");
		String genome = "TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT";
		System.out.println(findMinimumSkew(genome));

		System.out.println("MAX: " + findMaxumumSkew("GATACACTTCCCAGTAGGTACTG"));
		
		System.out.println("MINIMUM SKEW for a genome with Data Set");
		genome = readDataSet("dataset_7_6.txt");
		
		List<Integer> minimums = findMinimumSkew(genome);
		for (Integer integer : minimums) {
			
			System.out.print(integer + " ");
		}
		System.out.println("");
	}
	
	@Test
	public void testHamming() {
		String inputA = "CTTGAAGTGGACCTCTAGTTCCTCTACAAAGAACAGGTTGACCTGTCGCGAAG";
		String inputB = "ATGCCTTACCTAGATGCAATGACGGACGTATTCCTTTTGCCTCAACGGCTCCT";
		
		System.out.println("Hamming Distance: " + hammingDistance(inputA, inputB));

		inputA = "CCGCAACACGCGAGGCCGACCGCGGGGATCGTATCCAACCCGACGGATGGTGAACTCCTGCACTTGGCACGACATGGAGCTTTGGAGTAATACCAAGGGCTAGAAAAGAGGCTTGGGGGTACTCCCGGTCCCAATTACAGCGACCAGAAATCGACATAGGGAGTGGGATTGTGGAGCCGCGCCCCCTTAGAGACGCCGCCAAAAATTATGGCCAATTTCTCGACCAAGAGTATCCATCCGGGTAGTAACAAGCGGTACTACTTGACCATTCACTCCTTTGGATAGTGTTCTTCACCTACGTTCGCCTTGTTATTTGCCACGGATTGATGATAAGAATGAAAGATATTTAACACGGGACCCCGGACTGCGTCTTGCATATAATTCGGAATTCACTGCAAGTGGCTACTTAGTTGTTTTTGCTAACAATGACTTCCTAAGCCCCTTGATCGAAATCATGGAATTTAGTTGGAGGACGGATATTAGGGAAAGAGCTCAGATATAGGCCCACTTCTGTTGTCTAAGCATCGATCGACTGGCCGTACTCTCCGCGTCAAGTAGACATCTGCTCCCTTTAACTACCAAGTCAGAAGGTGCGAGGCAGTCTTGTTGTACTACTCCACTTCCCACGGTGTCTATGTGAAGGGGGCACATCAGTTTCCCCGGAATCCCTTGCATAGTGCCAATCATAATCACAACGTGATTTCTCGCTTGTGCGATCTTCATATTCCCTGTAGAGAGTGGCAAGACAAAATCTTCGAGGGACACTACATGCGGAGCGGAGCTAGATTATTACGCACAGTACGAGACTAACATTAAGAATATTACGCGATTATGAAACCCCAAAGCAGCGTCCAACGTCCGTCCATCGAGAAAACGTTCGTGTGCTAAACCTGGCCTATGACAACACCGAGAGCAGTTCACCTCCAAGAACATTGAAGGGAGCCCGAATTTCAGGCCAACGCCATAGAGCCTCGTTTGTCTGTCTGGTTATAAGTTTCTAAATTCATCCCTGGCACGGTAAACGTAAAACTTAGCAGTGAAGCAAATCCTTGTCACAAGATTCATGGGGCTTCCTTGTACGATATCTCGTTAGTTGGCC";
		inputB = "ATTCGGCGCTCGCAGTGTAGAAAGATGACCTGGTTACGTTAAGGCATTAAAGGAGCAGATGCACCAGCGATCTGATCACCTCTGCCGGGCGGACGTTGGGACATCCAGGTGTCAGAAGTCTGGGTCGTTCCGATCGAAGAATCATGGTACGTTTACTGTTCATGCCTGGCGTAGTCCCGCCCCCGAATTCCATGCTGATAAGACGTATAGCGTGCGTCACTGATTGGTGTCGTACGAGAAATAGTACCCCTCTATGGCCTAGTCTATGTTCATCAATGTCAGAAAAATTGTAAGTGTTTTCTCAATACCGTTATCCCACAGCGGAAGGCTACCGAACCGCAGTCAATTATATCGGCCACTCATGCCCAATCCGAACGAAGTTACGCCGATTCTGCCACAGCCTGCCTTAGAAAGCCGGTAACGTCTCTTCATACCACGGATCCCAATTAGAACAGCCTGACGCCAGGGGTGTCTAGCCAAGTGCGAATTGCAAATTAGATGCCGTTGTGACATCTAACGAGATCTACCGCCATCTGTAAGTTATATGTGATAATTATTGCCGCTAGATAGCATATTTAACGACTGTGATCAAGGTCTCCTAGTTATTATTCCTGCTCCCTCGAAGGCTAATCGGAACACACTATGTGGCTAAATCCAAGTGGACAAGCAAAGCCTCGGTATTAAGCTTTGCCGTGATTCCCTAAATGTGGTTAATCCACTCGCTTATGTCAACCTAGCAAGTGGAGGACAGATGGTTCGTCTTCGGAGACGACCCGCACCTATACGCAAGGATTAGCGATAAATGTTCAGCAGCAGTGTTCTCGTGGATTACTGACTAACCATGGGGTTCGAAAGCCATCATGTTACACTTGCGTTCTTTTTGATGGTGCACCTGAGTATATCCAACGACTTTCCCTTGTTTGTCGCGGGGTCAGTGCTTGAACGGGGGCCAATAATGTCTGCCTTCACTGGTTACAAAGTAGAACTAAATACCGGTCTTCTCCTTATATTAATTACTACAGCAACACCTAGCGTTTCTCTTCTAAGACTATATCACATTGAGCTTATCGATATGGCCAACAGACTAAGAGCTACTTCC";
		System.out.println("Hamming Distance Test: " + hammingDistance(inputA, inputB));
		
		String inputAprox = "CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT";
		String pattern = "ATTCTGGA";
		Integer d = 3;
		List<Integer> list = approximatePatternMatching(inputAprox, pattern, d);
		System.out.println("Aproximate Pattern");
		for (Integer integer : list) {
			System.out.print(integer + " ");
		}
		System.out.println("");
		
		inputAprox = "GTAAGCACTGGGCGACTCTACCATACGCGCTAATACAACCGCTCAATGTGGCCGCCATTGGCGTAGTGACACTTTGGAAACTGTCATCGACCACCGGAGCACTACCCGCAAGGGTCTCTTTGACATACATGGGCTCGTTTTCGGAATAACCTTGAAGGGTGTCGTCGGCGAACAATTGGGGGAAAAAGCATCCCCGCAGAACCGCACACCAACAGGTTACCGTTCTTAGATGCACAGGGTGGGAACAAAGGCAAAGTGATCCCTTTACAGAATGTTAAAGGGAATGGCTGCGACTAGGCGTCTTATTGGGTTAGTCTCGGGCAAAAGTCTGTCATCAATGAACTGTACAGTGACTCCTTTAGTTCTTGTCGGAATCACCTGGGTCCTTGCGCCGGTATACACTCTAAACCACAACCGGCGCATATCATTTTACCTTATCGTTCGGAGAATGACCCTACCGGCACGGTGATGGCGACGCTTCCTCGATAATCGCGTGTTGACGGAGGAAGATCGTTATTGGTTCTGGACAAAACGGGCTGCTCCACCTTACCATGTTCCGTGCAAAGGCCCACGCATGACGCACTAACCATCGGTGCCTCTTTCCATGGAAAGTAGCTCTGGGCAGCTAGTTCAACCGCCGAAACGTGGGACTGCTATGAACATATGAGTCATTTCCCTCTGATAGTGGACTAGTGTCTTGGGCAGTGAGCAATCACTAACATAGTATTATTCATGGTGTATGTCGTTATGACTGTCGGAGCCCGAGGTTCGTCAAGAGATGAAGTACCTATGAGGTGAAGTCTAAATGTTTCCTTTGCATGAAGTTCAGCGCATAAGATTCATTGGCCCAGCGCACCGGAACCACGATGTGAATCATGTATCCGCCCAATTGAGTCTCGAAAGTGTTGTCTCAATATTCCTCGGTTCCGTTGACTGTCGTTAGCTTTAGGGAGTCTCCATAAGCGGAGTAGAAAGTATGAGTCTATAGTGCATCCCCGAGCGCACTAAGATTTTGATGTGCCGCAGTAGGCTGCTATTAAGGCCAACTACAGACATATAAACTTGCAGAGGACGCTGAGTAAGTTGCACGGAGACGCGGTGGAAGTATGGCAGCTGAGCCGACGCTTAACAGATGTGCGCTATCGTTGTAATTCTTATGTACGCCCGCTTGGGCTTAACGAGGATTTACCGCGCGGTCGTATGCATGTTACCACTCGTATCCGTTGCATGTCGTACGCATCTTGTTTACATAGTTAGTCAGAGCACATTACCCGAGATGCGCCCGCCCCGGCGCGACTATTGATGAGTGCTACGTGCAGTTGGTCCATACTGTTGAGTGTTAAAGACCCCGTCTTCTAAACGTAGCCCGGTTGTTTTGCACGCGGACCGTTACATGGCTCTGGTATCCGCGCCTGTGACAGGTGTCTGGTCTTCCAACGCTTAGCCAAAACACTAAGCTATGACCCTCCACTAAGAGAATCTAGCCATATTGGATCGGCTGTTCATATACTCACACTACGCGCGGATCAACTATCGACCGGCTTTCTAATGAAACCACTGAGATTCGATAACCCAGTCTACTCCTGTCACTGTCTGGGCATTTCATTACTGCTCAAAAGTACACGGATATCTCCGCATTTAACTCTCTGATCCCTAGAAGGGACCCTTCGATAAATGATTCTGCCACGCTTCAAGGTTTACGTGGGGTTAAGCATGCTTATGGAGGAAACTGGCACTCTGGGTTCTAGTATATTCAGGAGTCTGAACCTGTTGAACTTACAGCTACTACAACTCATTGCACTCGGGCCTCTGAGGGGGCCCGATCATATCGCAATAATGGAGTCTACCCGAAGCGAGAGCTCGCGTAGGTCGAAAACAATTCCTGACCGCTCGTCCAGCCCACCAAAGGCAGCGTACACCAGGTTAACTTGATATCAGGGGATAGGACTTTAAGGCATCGCGTGTAGTATTTGCACTCTGGAGACCAGTTGCAATTCAACCCCCGTAGTCCCGCATATTATACTATACTCAGACTTTAAAACGCCTCCGTTGAGTTCTATTCAAACCGGGTTCGACAATCGTAGCCTATGACCAGACTTAGTTCGGCGAAGCTCCTGAAGCATCGTTTCAGCACCGCCTCCTGCCGGCCTCAAATTGCGGATGGCGAGGTCTTTGATAAAATAGGGCTTAAAAGGTAGCGGATACCGATAGGCAATAATTGTGGGTACGAGCCCGACGTAACGGGTGCCATAATCGCTCATCGAACATCAACAATGAGAGGTTCGGTCCCCAGGGGGTGGACGTGTCTTTCGTACCGAGGAGTTATCGACTTGACGTCAGTCGCGTTGATTACTTGTCGGAAGGGTCTGTGAACATTTCAAGAAGTCCGCCGACATCCGAGGCGCTGGGGGTCAAGGTACCTGGGATCCCGACGGCGTGACCCGCTGCGATTCTGACTGATGTCACGTATTGCGGGTATCGGGCGCAACTTTATAGATCCGAGGTCGTCTCCGGAGTAAATTGGCGGTTGTGCCGAAAGACACACGACATAGTGCGTGACAAACCAAACTTTGGGTTCTATTCAGCAATTGATGGCTCATCGATCACAATCGAGTTAGCGGGAGAGTCAAGTCGTGTGACGATCCAGTCCTTGGTCCCCAAATAAGCAACTTCTTCTTCGAAAATATTTACTTCCCGTGATGGTTTGATCCGCCAGAGCGGTAAATCCCTAAGTAAGGGTTATGGAGTGTGCTCGTTCGTTCCATCTTCCCTTAAGTTATCGGGTTAGGTTGGGCCACACACCTACGCGGCCCTGGCTCTTATGTACTGACTCAACCTGCACAGTGGTCCTTGTGTTGACGTGCGCTCTCGGGTTGTTGTATACGACAAAAATGATGACAGTTTAAATGAGGGGGGATTTTCGCCTAGCCGTGCATGGTAGCTGTGATCCTGCTTACTTTGATTAGTGGGGCCCGAAGACGCCGACCTGGTGGATTTGGGCGATGAACTGGGATCAGGGCTCTTCCTGCACAGCAACTGTTGTGTGCAACTCTCGCCCGTGAATCAGGAACTAATCACACCGTTATTCTGGTCTAGTTAGGTTCCTGTCCAAGTGTTAGCCCGACCGTACCCGAAGATCTAAAGGGACACTACCCGTAGCCAGATCGTGATAGGACTTTTCAACAAAAGATTGCTTCCAGCTTATGGGGTTACAAATAGCCCAAGAACTCTTTTAGAGTTACAGATGTGGCGTTCAGCACCAACCTCACTCGTGAATCTATGCACGCTGGAGGGCTGCTTCCCAGCGTCAGGGGTTAGCGTTCCTAAGCAAGCCTGGGTGCCCCGAGCTACACCGCCGACTCAACCATCCTACACTACATCGACCATCAGCGTCTCTTTACCAGTACTCGATAAAGGTTAAGACAGAACTTTGTCACAGTTGTACAAACGACACAAACTGTATGCAAATACTTCCGTGGACCATCTGAGCGATTACCGACTAGCCACGCAAGGCGTGCTGCATCTCAGGGGGTGGTCCGAACGTCTCGTTTTGCTGCAGGACGTCTCGATCGGGTATGTTGTGCCTTAAGGTGAATCATATTTGTGTGTGCGGGCTTCGGTTCCCCAGTCCTGCGGAAAGCAAAGTCGTTCCTCCTGTAAGGTACGTCCAACAGCCCCTTACTTACGGTAAGTTCCCAGTCTGGCGGATTCACAGGCATTCTCAATACCTCCTTCTTCATACGGAGCACCGACACCATGGCCCTCCCTCGCCCACGCGTTCATTACAAATGAATAAGGTTGCTGTCATCTCTTTTGTAGAGCGCCTGACCCGCAATCACCGAGGTTCGACCGACCCTTACGACAGAGGCTGGGGAACGGTCAGCTACTTCCGCAAGAATAATACCCACGCCATCCTAAGCATAGATTGGCCAAACGTGGATTTTAAAGACTTCGAAGCTCCTTGTACCACCAAATCAAGTATAGCTCGAACGATTTGTCAGAATGGAACAAATCGTTTACCTTATGGGCAGCTCTACCGCCCTGCTCCTGCCACCCATGACGAGTAGACTACGCTTCGCGTGCAGGGGCGGCCATAAACACGGCCGCTGTGTGCATGCAGCGTCGAAATGAAAATGCACATAAGCGCTAAAGCGCATGGCCAACCTCTTATTGTCTGTATTGTCGAGCATCCCTTTGTCGTCATAGGGCCTTGGCACGCAGGAAGACTCGTGGCAAGACCTTGGGTACTAGGCCGACAGCCTCGATACCGGATTCTCGCCCTTGCTATCGACGTCATAGTGGATAGTTCGCCTTCACTGCTGTGAAGTTCCGTACTCTGGTTGAGCGCGCCAAACTGTAGCGAGGTAGGGATCTTGTCCGGTGAGGGACTGTTCCAGTCATATAAAATACATGGAGGTTTATCGGAATATGACGAACTTGGTAGCTCCGGCAAACGAACTTATGCAAATACTTGCTGCCACTGTGTCCGGCCCTAAGTGGTCTTAACTGAGGTTCATGCCCCATCTTGAGACCCTCAGCACCAGGACAAGTCCATTAGGTGACCGTAGTAGACGCTATTATAGTCTGTAACTTCCGGGCCATGCATTTACACAGGTTGACGAGCCAAATAATTTTGGTTTGGGACCAAATTCTTAGCTACTCTCCATGTAAGGGCGACTATGATAAGGCTCATGAGTTAGAATGCCTGGGAACATGCCGCGTAAGCGTCTCCTCAGCACAGTTCCGATTGAATTCGAATGTGTAAACAGGTTACAAAGTAGCAGTGAGCCCTCAAGGATCGCATGCAAGCCTATGACGTAGTTTGTTTAAGCCACTTTCCGTGGGGGATAGGGCCCTCATAGAAAGCGCAGAGTCAGGTGCGGTGGCCCCCTAGGCACCGGCTCGACGCTTTTGGAGAATGGTTGGAGGCGCCCAAGCTATCGCCAGTAGCAGGTGGTAGTACACGCGCCACACCTCTGCGAGCATCACGAATGCAGAAGTATAACCTATTCGCTGTTGCCTAGGGTCCGGAATGAGGGCTCTGTACACTATAATTACGTAACGCGTACTTTTCAATAAGGGTGAGTTAAACTCTACCAGCGGTAATTTCTCGAGCGATTCACCTGAGCGACCATGTAGCGGGCGTCCGTCGAGCCAACAGTACGTTAGTGCGGTACCATTTTTCATAGTACCGATAGCGAATGATAGCATCAGAACGCGAGACCCGATCAATGTCCTTTGTATTGATACCGAGGCTTATATATAGACAGGAGGGCCCGAGGGCGACGATACCCGCTTTGAGGCTTCTCAGAAGGCACATACAGGTATTCCGTTTGGAGCGGGAAGGTTATCAACGTCTAGGTAAGGGCCATAGTGTAAGTGTCTATCCTGCGGGTAATCTAATCTCGTATTTGCCGTTAGTAAGACACTCGTCACACCCGATGCCCGTGCCATAGATAAGTGCCTTTCGCCGATTGAGCTTTCGCACGTTAAATACCAACTTTAGTTTTTTTCTGATAGACGCAATACGTAGGAACATATTCGTGCATGCCGCGCGATCAGGATCCTTAGAACGGCCCCGATCCGTCAGATTCGCGCTGTGGCGCGTTCTGTTCCACAAATCAGACCGGGCGGACGCAAGGGCAGCCACTTAGCACTATATAAGCCTGCGAGATGTAGTTCCTGGGAGCTTGGGCCTTGCGACACTTGATACAACCAACATGGGTGAGGCTGGAGAATAATATACACCAGAACGACGTCGCTGTGCCGTAAATGACGAATCCGTGTCCACCCCGGGGGACGTCAGCCTTCGTCAGTTGAGGGGCTGACGACTTTATCATCACGTTCTCGTCGCTCGCCATGACTTCACCCGTCCTTATTCTTCGGGCTACTTCCGGGCACACTCGCTTACGGATGGGTGGGCATATTATTTGGGATATGACGGTACGGGTCTACCTGCGCTATCGTATGACACAGTAGAATTTAAAGATCTCTTAGAAGCATGTCCAAGCGACCTAGCAGTGACTTGGATCCATAAACACCAAACGAAAAATGGCTTTGTACTTTTTTATCTCATTGGTCCGTATGCGAGAGGAATAGGGAAATACTACGAATTACGGACATGTCTACTCAGCGGACCTGTGGTCTGACCCTAAGATCCGGAACGGCAATGGATAGCGAGCACAGTCTGGGCATGACATTGACTCACGGTGACGTGTCGCTCTCCCTTCGGGAGACAAGAAACCAACAATATCACTCACGTCATGGCTGGTCTTCCCCCAAAGAAAGAAGGATTAAATAAGCTGGCCGTGATGCTTCGACTAATTACTAGAAGTCTAAAACATCTTAAAATTACCGTAGGTTAAGGTTAATTGTAGGAACCTAGCGGTCAGGCACAGGCTAGGTTTGGACATACGCTCGGCGCAGATTAGGGACCTTCGGGGAGCATCATAGGCGAGAGTGGGCTCAGAGGACTCTAGCGGATAAGTCTAGAGTCCGTAGTTCTATTTTTGTCTTTTCGTACCTAGCAAGAACTGACTTTTAGTTGGTGAGATCATCAGCTTGCCGTTTTATGCGTCACTTGAAATAGGCGTGTTAGTTGTCAGCACATTTTCATGGAACTAGTATATCTGAGGCGTGCATCGGATATAAGCCTCACCTTTTTTAGGAAGGCCACGATACAGGTCAGACATCGTCGACTCCCCGGCTCGCTCTGCGTTTTCACATCCTCACAATCAATCGTCTCCACCCTGCGGGCGGCTTTGTTTATGAGACCAAAACTCTAGCCGGATGTAGTGATACAGAGGAAGTTCACATCAAGCGCCAGCTTCCTAACCTACACTGGTTCACAGTACCGCCGTAGATCAGGGTCGTCAACACTGTCTGGGGACGTTGGGGTCCGAATGGCCCGGACGTCGCGTGTAGAGTGCGCCCTGAAAAGCTTATCCCGAACTAGGGGGCCACGCTCACGGGACAATTATTGGCCTGACGACGATGTTCCACGCGGGAGCAGCACCAAGCCGTCCGAACGAAACCTTTAAATCGTTGAGGAGGAGCGCGCCCCGTGTGGCGCGTTACAAATGTCGGTCACCCGGGTATATCTAATCGTCCATGAGGCGCCGCCCTTGGGTATCTTCTACGGCGTGGTTCTCCCTATGAGTGTTTCATGCGAAACATCACAAGACATTTACGCGTCGAGTAGGCATCATTCGTACCCCAGGGCGTTAGAAACACACGATGAATCAATTGGATCTGAACGGTCCAAAAGGGATGCTCACCTTTCCTAGATGAAACGCCATCTTTGATTTTGGGGGCCTGACTCATTGCCTTTTATAAACCGACCGCTTCAAAGCCTGGTTATCCTGGCAAGCGTTTGACATTATACTGAGAGCCGATCAGACACTAGACGGACTAAATTCGTGACAACGCATATGAATCCGCCAGCGGATGGCGGGATTCAACGCTCGCCTACAAGTCAGCGCGGATCTACGTTGCGGAACGACTCCTGATAGGCCGTAGCGGCACTGAAGTGCTTGAGCCCGCGTATTGCTTGTCAACCCCGGGCCCCGCCTCTGCATGTATAGATAAGCGAGTTCCGATCTGCAGCTCAGCCGCATTGTCACGAGTCATCTAAGGACCCAGTTCCCCTACTATTCTGTCACAGGCAGCGTGTACTGAATAGGATGAAAGCCTCTCGAAGTACGATAATGGCTTCTTAGTTCTGATCGTGCGTCGTCAGCATACTCGCTCATCCACAGATAGCCCTACCCAGTAGGATAGCGAAAAAGACAAAATATGGCAGCAACCGCCACGGAAGGTGGAGCACTCTTCTTCCAAGCCAGCGGTGTTGGCAAGTTGGTCGTACGTCATCTAATCCTGGTATGATTGTCGGAAGGGCAACCCGGGGTCTTGGGTGTTTTTCGTTAGCTCGGAGCACGCTACACTTGTGCCCAGCGGGCAGTGGCGTGGTAGAATTAGGTGACGTCGCGATAGTGCGCTCGAGTTCTAGCAACCGTTACACTCACAGTCTTACAAGTGCTTCGCACCTACGACGCTTGGCAAAAGGAATGGAACAGCATTCATAGCATTTGTCCTGAGGGGAAATGTTAGGGCTGGTCCAGTTGTCCTATGACGATAGGGTTGGACGGGCAGCACTATGCAGCGACCGTTTACACAGTTACTAGACTCCGATCCTCCAACTACCTTTTCCGAACTTGATAGGGGTCATCGAGTACGTATTTGCTGTGGCATCTCCTATATGTTCGTTACAAATAACACACAAATGGATGCTGCGCAGTTTGATTAGACACGTGAGGGAGCGCTCCCCGAAAAGCATAGGCGGCTGTTAGAGTCATAGGGGGGCCAACTGTTCGACATAAGAAGAACACCTTAGGCCGTCCCGGGATTTGGATATAATCGGACCGCAATAGGCCGTGACATACTCTGTGCCAGTATTAACATGCTGGGAGATCCGCTTAAGGTCCCCGCGAATAACAAAAATGTTTGCAAGTGGGCTCCTGTGGAGGGAAATCCTGATCACCTTCGATTCGCATTCGCCACGAGTTCGGTAAAACATTGGTAACGCGGAGGTGATTAGGGGCTTGCGCCATTATTGATGGGTTCCAATTTTCAAGTATCGTCAGACACATAAAATACTCAGACGGTCCTGGATCCTATCCTAATGGGCCCATGACAGGGCAGCGCGACAGCGATTAGTCTATCACAAGTCCACGATACCCTCGGACTATCATACTCTCTATGTTTTACTGCGCAATTACTAGAACCTCTTCGTTGTTGGACACTCCGCTATCTGTCTACTATTTGTTCTATGATTACCACAGACAGGCAAGCCTATGGAGTATGAGGGCTCCCTGGGTCCACGTTACAACTGAATCGGAGGCATCACATTGGCGACTCGTGTACCAATAGCTGAGCTGTTAAACCCTTTTTTGCATTAGCAGGGAGGCCTTAGTCATTCAAATAGCAACTGCGTTAGGATGTGACGACGACAGAGGAGATGTAAACCCACAGCAAATCAATTCGAAGCCTTACTATCGACCCCCTATATAAACGGAATGAACGCCGCGACAGAGACATTGAACCGATAAGGCCCACGAGTATTGTATATAGTAGCACGTAGGAACGAACACAATTACGACTTGACAATACGATCAGTGGGGCTCTATGTCCAACTTGGCCACTCAAGAATACAATACCTGCTTAAATTTTTCTTAGTGTGCTCAGGGCGGACATTACAACGTCGACGCCATCTTCACGGCTATCCCGGAGGGTCGCACACACGCTACTATAAAGCCCATCGAGTGTATTTCGAACCGCCATTGCACCGGACTATGCATCGGCGCAAGTGAGCCTCCAAACACTGCACTAGGGTCCAAGTCGTGACTATAATCAGAGGCACGAAAAGCCACTCAAGACCAACTTCCGCTCGGCTAAATCGCTACTTTTGTGCTCTTCAAGCCAAGAAATTGTAGGAAGAGCAGCTATGCAAGTCCAACATAATCACAGTGGCCTACATCTCCCGGCAATGCTCGTTGATCGCGCCTCTTCCTGGCAATGTTCCGTTTCAGATGCCCTTGCTGTAGAAACAGTGGAATAACGTGCGTTCCACTCGCTCCATGAATAGTTGATCGGCCGGGTGTAAAGGCATTGAGCAACTAAGATAGGTGGACAAAGGACTGAAACATGAAAAGGACTCCAACATACCACCCAGGGATTTTTGTGATCTTGTTCGGGTAATGCATGATGATGTTGGGGTTTGGATAAAACACTCATGCGGGACGTAGACAGGTCCTATTACAGGAACACCCCGGGCGTCATCCTTCGTCCCGTCGTCTATACGAAGGGCAACATAACAGTAGCCCTGGACGGCTAACCTCCTGACGCACGCTTTTTGTCACATGTCCGAGTTCTCGGATTTAGACTCTAGCTCGAGTCATCAAACACCCGTAGCTCCAGCTCCGCAGAGGCCGCGTTGGCTTCTACAGCTGGTTTCCTACCTGTAGGAGCATCTACAGGCCCGGCTCCAATGAGACTACTTAATCTGGCACGTGGTTTCCCCTACGTGTGGGCGTTCCGAGTTGAGCAATATTTTAGCATAGTTTATCTTGCTAGGATTTAGCTTGAAATGCAGGCAGGCGCTAGTCGGTCCGACTCAGGGGTCCCTAAGGACAGATAATAGCAGTTGGTGAAGGTCCCTTTATAAGCATCGTCCCCAAGCACTTTTCGCCTACGTTCCTGTACTTACGAACCGATAAAGAGACAGAACACATGCACTCCAATAAAATACGGCGCGGCCAGTCACTCTAGTCGGTATATCCGGTAGGAGACACCGATCTCCAACTATTCAGGTATGTGTAGGGTCTATTGACGTAATCTCTAGCCGACACGAGAATGTACGTACCAATATCCTGCACCGATGACCCAGCCACGTCTGGTAACTACGGACATAATTATAGAGAATTGCATTAGCGCACCTACTCCTTATTGGCTACGTATAGTACGATAACGTTCACGACTGGCGGGTACTCTATACGACCGATATCTTTAAGCCAAAATCTAGACCTTCGGGCCAGGTGCTCCTCTTTCGTACCATAACCAGAATATAGGGCTACCAGTTCATAATTCCATAAGGACAGTTACAGCGGTCTTGACTCTCGCGCAATTGGGATACCCTGAGGGAAATTGGTGTATCTTGGTACGTCTCATGTGCTACTCAGGGCATCTACGCCGGGGATGCAGTGTGGAGAACTCGTCGTGTACCGCTGACGAGAAATCACGGGTGTTAATTTGAAAAATGGCAGTCCATCAATCTCAACCGTGTGCATCGAGGACAACCGTCCTAGGCAGACGTCTCGCGTCGGGCTTCTCGGACATGATAAACAAAACGAGCAGGTTCCGGGGATTATCTACATAGCGTCGAAGCTTCGCCCTGTATTCCATACCAAGCCCTTCCATCAATCGGCCGATCTTTATTTTTTCCGGGTTGCAGTTAACGGCTGTAAACCCGCAATAATTAGAAGAAGGAGGCTATGCCCTAGGTCGCTTAACGCCGTTTGACTTTATACCCTGTATTTAGAAGAGGTACGGGCTCCATTGCTAACGGGGTAATAGTGGATTAAGACTTCCGCGGATAACCGTCAGATTAAGGACCAGCAAACGTGAAGGACGAACTACTTGACAATTGATATCTAGAAAATCCGACGGACGAGAATCGTCCTAGAACTCGGAGACAGGTAAGACTACGACCGTTAGTTTAGCAGGGAATGTCAGAACACTGGGAGCGAGTGGAGTCCTTCGTGCATACAGCTCCTCTCCCCATTAGATCTCTACGAACGGCTATGGGACAATTAACGGATGTCGTGTGTTTGCTCCAGCTTATCGCCACGGGTGAGCCGGAAGACGGGGTAAGAATGTGCGCCGCTAGGCAGGTTTGAGGCGCCTGTTCTGTTGAGATGAGGCCCACAGGATCCTTATTACTGCTCGCCCCGCGTAAGCAATTCATCATTACCTTCTTATGACTGCGACAATCAGAGGCGAAGTCGCGTTCCCAGGGATAGTTGTTGCATACTGAATAGACGTCTATATACATCGGCTGCGTTCAAGGGACATCTATTGTACTATCGGACAACACTCTGCCGGGAGTAAAAGTGGTTCAGTGCGAAACCATAGTTCTTCGCCACGGGTCTGAATCCGCTTGGTGAGATGGGATCTATTCCTAGGATCGGTCAGAACATGTCTTGGGAGATGCTCTATAGAAATAACTAGTGCTTCTACCGTTCACCTACTGGGGTGGACCTCAGCCCAGAATAGATCAGGAATATTTCCCCCACCGCGTCATTGTAAGTTTGCAGTTTTATGTTTTGCTCCAACGGTCCCGGTCGTCCAGACACTGGAACTTGTTGATCCGATTTATGCCAGGGGCGTGAGTTTATTGCTTTTCCCCTCAGACATGTCTATGATGCTTCAGTCCAACAAACCCTAGAAAAACGTACCTAGATGGCAGATCGCAGCCTTGGTAACGATGGTATCGTGTGTGGACGACCTACCACCGGCCCTCTAGTAAGATATCTTAGAAGCTCAGTGCGAGGTGGGGTTTATGACCTCGCTGGCCTACGCCTCTTGGATTCTGGGTGCTCCTCGCCTGCTCATGCGGGTGTAGGTGGGGCGCCGCGTTTGTGCATGCACCCTTCCGTGAAATAACTCACTGATTCGCCAGCAAATTACCTCGCATTCGCGATTCCCACGACCTCAGGGCTTATGATCGCATATAATTTAATTTCGGACGCTACCAGATAGTTAAATGTACTATAGTCCTTACAGAAACACTATCTTGTCGCGCTTTCGATAATGCCTCGCTAGGCATATTCATCTTTGTCACGTGCAGCGATAACGCTAGGTGAAAGTCCGCCTAAATTTAACTGAGGGAGTCCTTTGACATTTTATGTCCAATTTCCGAACGTGCATCTTGGGACCGGGCTAATCCATTACGAGTCAACATCCTTATAGAAAGTTGATCGCTCATATACCCTGCGACGGATATCGATCCAATGGCTTTACGGGAGCGATAAGGGCTCACGCGCTTTTAATGACCACAAAATAATGTGTGAACGGCCCGAGCGCCGAATAGGTGCTGCCGGCCACGGTTAGGACACCCAACAAGCAGGGCCGAATTTTTGCTTTCAGTGACTTGGCTCGAAGCCTCTGATCCGGACAGGCAACAGACCGCATCATGGAAAACGTGAGTTTAGGGGACGATCAGTGACTGTACGCCTCAACTCGGCCTCTGATTCTCGCCTATGCTCGGTGGTTGCCCTGAGTGTACGTTTACGCGCAGACGATTACCACCCACGTCACGGAGTAGAGAGATTGCGCTCTTATCTGCCGAATATCGGCCATTGAGTCCGCGGGCATCCCGAGCTTCGAACTGGGAATTCGCGGCGCTCGTCCAGTACTCGGGATACCATCCCGATTTCTTGACCTCACTACTCCTTATCAACAGCTAACATTGCTGGTGGATAACGGAGGGGTGATTTGGATATCATCCAACCCTAAAAATTACGATGCCAAATCCAGATTGCCAATGCGCTATCATATTAGTGTGCTCTTCTAGATCCAAACACCCACAGAAGTCGTGATCAACATGGTCCTCCACGTCACAAAAATCCCCTGTTCCGTTCAACGCTAATCCTTTCCCTGTTCGCGTCGTGCCATAGCCACTTGCGTCACGGATCAAAGTGCGCTGGGTTCGTGTAGTGGCGTGGGAGCGCGGGAACGCGGTCTTTCAGCCGAGGCGTAGGAACGCTTTATGCAATCTTTGGATAGAGGACGGAAGAAACGATTTGTTCCCCTCACTTAGGTGTAGGCAAAGCCGGCAGCTCAAACCGACGATAAGTGGCATGGAGGGCAAGCATAAGCTCAGTTAGCAGCAGAAATCGTATCAACGTCCAATCTTGGAGGTTCTCTAAGAGGTAAGCGAACCAGATATATCCTTGTCCGCTAGCACTGTCACAAAGGCTAACGGTTATTTAGATCAAGTCACCGACTACGATCCGCGGCATAACCTGAGTACGCGGAAAGAGCGCTCTGTATTTAGTGGCCTCTTTGTACCATCCGCCGACGTAGTAATCCGTCGGAACGTGGCTGTGACTGAGGGAGCTAACAACCACACGCCGCAGTCGCGTTCCCATGCCCCCTCCCGACTCGTCGGACTGGGCCTGAACCCTCAGCTTTGTCTTGTAGTCCAGTTATACGAAGCCGATTCGCCGAAAAATGTTATATGGTTGGATAACCTACCGAGACATCAAGCACACCTCAAACCGGGGTACTCTCCGGAGTCGTCCTAGGACAGAGCGGCACGTTAATTTTCATCGTCTATCAACTGCGTGTTCTCAGCTCGTAATTGAGTCGCAGCAGTCTAGGCTGAGTCTCTGTGCTGCTGGAGATTCTAAATAATGTCGATGACCGGCAGAAGTGCTGAAATACGAACATTCAACACGAGTCAGGCATTGCATATGGCTGATAGTGTTTCGCCGACATTCCCTCCCATATTTGAGCGGCTGTACGACCCTAGAACTCCTTCTGTAGCTCGAGAACAGGGTATGATGTTTATATGTTGAAATCGAGCTCCAAATTAGCACATAGTGTTCGTTCAGGCAACCGAAGTCGTCTATGTTAGAAGGCGTAAAGGGTCGAGACCCCAACAGGGAGTTTGCCCGGTAGGCGGCTTTTGTCGCAAACCAATGTAGTAGTGTATTGCGGTGTGTCGACTAGAGAATCAGACCCATAAAGGCCACAAAATTCAAAACCGATCGTATTCTTGGTTGACAAATTGACCACGGGCCATAAAACTGGTGAAAATATCCAGTCGCGTATGATAAACCTCATCCCAGTGCTCAAAGACATAATACGCGTCAAGACTGAATTGCGCGGTATCGTTTTTTGCAACGACCATTATGATGCCGGCTGGAGGATCGCTGCACAGGCTGGCTTCTCTTGCTTCCAAAGTCGGTAGTGCACAGTTCCAAAACCTTTGAGACCCGATAGCGCTAACATGAAAATAGTTGAGTAGGTTCAGCCCGCATACCTAGTGTGCCATACGACGACGTGAATGAGGCCGCGTCACCCCACTACGTGCCAGACCGTGGATCTGGCCCTATTTTCGCTAAATTAGATCAGTTGCAGGGAAGGGACGCTGTGTCATCAACTTTTGCCGTAGCTATTGATGCCGGACTTGGAATGAGGCGGAAATTCTACGTCCCTTGTCGAATCAAGATAGCTAAGTTTTCGTGAAACCGACTTGATTAGTCACTCTAGGATATTGACGTCCCCGTGGGCCAGGTGCGGCTGAACAGCTGCACAACTACGCGGCAGTCCCGCCAATCAGTGGCCGGTGCCGTGACCTACACAACCGACGTCGGCCCGGACAAAGATGACCGATGTCAAGGATAAATGAAGGGTTGATTTGGCTTCCTAAGCCGGACGGCAAAGTCGAAGGTTCGCTATTCCAACGATGCCTACCATAGTGCAGTTCATGAATTCCTCCGTTTGAGAAGATAACGCGCTGGACCAATCTGTAAACCTTGCGTGCTCAGAGAATGGTATTAGTGATAATCATCTGGAACATACTAGATTTCGACCAGTGGGCCGTGAACAGAGATGGCTACTATATCCGCCCTACGTCGACGACCCAGGTCAGATGGTGATGGTATGCATGTCATCCCCCTAAGCCTCCAATTATCCCCACTCATCTGGTAGATAGATGCTGCGGCTATCGCACCTGCGGAGGCCGGGTTATCAATCGTCCTAGAAGCCCAGTGGTGGAGAGAGATGTGCCTTTTTTCGCCTCATGCCGTGCTGAAAATTTACGAGCGCTCCTACTTGAGCCGCATTGAAGTTCTGTCTACGCTAGGAGCCTAGACGCCATAGCAACAGTACGGGCCGGATAGACGTGTCCAAGGTCGAAGCATACTGCTATGTACGGCAGCCGTCTACATATCTTAATGCGGTAGCTCGCGGATCATTCGTGAATGTACGAGATAAGCATGAGGGGGCGCTATTCATCCGTTCGATACGTTCCTAGGTTTGAGGACCCCGTGGAATTCGACTAGTTGGTATCAAAGGCTTATGACTGATGTTAAAGCGATCGGACTTCAGCTTGCGGGTGTCTGCCTTACCGCTTAATGTATTATATAGTCATCCGCGGGTCCCCGTAGGACCACGCGTGGAGTGATCCCAACGCCCCCACGTTCCAGGTAGCGGTCTATCATACTGAGTATAGGATGCGGCGTGGACGTTGCGTTGCACCGCTCATCACCAGCACTAGAAGTTCAAGGCCTCTCCAGGCCCTTCCTCCACGACTTATATACATTTCAAAGCGGAGGTTAACGTATGTTGCTAGTCGAGCGCGGGGCTAGCCACGTTACTCTTAAGGATCACGCATCAGATACCATCGACCACGGCAGTCGAGTAGTTTTAAGAACCTTTTGGAAGGGGCGCAAAATTTATCTCACGTCGCGTGGTTGAAGGATCGATATACCCAACTTGTGTAGTCGCGAGAAAGGGTGGCTGGTATCGAAGGGCGCTGTCGTGATCTCAAATTGACTTTTTGGTACCGAGCGTGGTCACCATCGTCAGATAGAGTTTCATTAACAACTACGGCCCGAGAAGACCCCCTCGAAGCAACGATTTAAATGGTCATTACTCCCAAGAGAAAATCCTAATCCAAAGACCCAATTACTACAGATGTGGTCACCGTGTACCGCGTCCGCCGCGCTCATTAGCCTTCGGCCATTAAGACGCTGCTCACGTCTTCTAGGACACTTTATTTTCTACTTGATGGCCGACAGTGCGTCGGGCTCCTGCATGGTCAGTAGGCGCATGCGTCCCCTTCCCGACTCAGCGGCCGGGTGATATAGACTCACTGATAGAATATTGGGAGCGGGGGCGCTTCTCCGTTTCATCAAAATACCGCTTCGTGAATAGGTACACGAGGCGCATGCGCAGATAGTGGCGTGAAACTCTGAAGGTCCCAGAGAAATGCGTCCGTACGTTAAGTATATTTGTATATGATTACAGTCGTGCTCCGACCGCTACGTAATTGACCGCTGATCATCGCGGTTCCGGTGTAGGGTCTATTGTGCCAACCGCGACGTACGGTGAGTCAGGGTCGCCTACGCGGACGCAAATATCGTACATCGGATGCCACATGGTGGACCACAACTATAGGCACGCTGAGGCATCTTGGAGTGCATCTCCAGATTTATAGCAACCGCACTACCCTACTTAACTGTAGCCTAATAAATGGTTTACTAGCTCTTCATTGCGTGTATTACCGGGAGAGAAGGCGGTGTGAAACCGCTACGCAAGAAACGTTGTCCTACTGGTTGCGCCACTACTAGGCAACCTCTCCGCCGTCCGTAAGCGCACGCAGCAACAAATGTAAAAGTCACGAGTTTGCCATTATCCTACGCTGCGCTCGATATCGTAGTCTTCAGCAGTAGCGAATATGGCAATGGATACTGGTTTGAGGTGAACGGAATTGTTGAATCTGGCCTCAGCCTAGTTAAACAATATATTTACGCTTTCCTGCTTCCGGGGAGAGTAGCCTTCCCTTACTGTGCGTGGACCACACCATGATGTATCTTATTGGCCGTGCCCTGGGTCGGAAGATGCAACCGAGCTATAATAATTCAAGGAAAAAACGATTGGTTTCAAGCGCCGGAAGACTTCTAGGGGAACCGTTCCACGGAGTATAGGGGTAACTGCGTGATACCTAAATCATTACCTCACCGATGATCTCCATAGTGTCTATGAACTTCGACCTACGACACTAGAATAGCGCCGAGATACACGCAGGGGTCCAAACCGTTTCGCCAGTTTCAGAAGAATTCTCAATAGTTCGTTCACGCTTGACGAGGGATACATTCTTTGGACGGTCTTTCCCACAGCCGGTAAAAGCGCATATTCATGCGACCCAATTCATATACTCCAATGCAACGAACAGACTTTCTTGCGTAATGCGGGAATTGTTTACTACTCCCGTTCGGCGAACATGGGCACTATTTTGTGTGCCTCCCACTTAGACACAAGTTCCATATAATATAGCTACGACACCAAGGACCTGGGCGCGATAGTGACACACAATGTTTAATAATGCCTCGCTACCGGAACCGGCAAGATGGTCCCATCACACCTAGTGCATCCTTCACGCAGCTGATGTCCAAGAAAGCGTCTTCTATGTAGCTAGGCCTGTGGAAAATTTCGGTACAAAGCTAGCTTCCTCGCAATCACTGCTCAACAATAGGAGAGAAGTTTGTTAGCAGTGCGGACTAGTTTCATGGATGTAGTTTTGTGTAACGTAGCACATAACCACTCTGCCCACCGTAGAGTCACAACAGTTGAGGTCGTTTAGTAATTTAGAACAGCATAGCCTTCCAAAGTTGAGCAGTCGCACTGTGTTCGCGTTAAATTATGTATGAGAGACCGGAATCATGCGACCCGATGGCGCAGGGCCATGGAACGTGTCGTGAAGTGTAGAGGGAACACGAGTCGCACCTGATTGTGTGATCCGTTCACGGTAACAAATTAGCCGTAGGCTTAATTGGGCGTTTAGGGCTGACCACTTGCCGGTTTCTATACGCAGGTCCTGGGGGAGTTCGCATTGCGACCAGGGAAATTGTGGTTTAGCTTCTCAAGTGATGCGCGTCATCCAGCCGCGTTCTTGGCCTCACCTCAACTTAGTCAGGTATAACTGGAACCAGCTTGTGGTAGATAAACATAACTTCCTGTCCTGCGGATCGTCGCACTCCTTGTGTGCCAAATGGTGCATGGCTCTTTACACTCAGGATGTCTGATAGGCACTGTAGTTCTGTCGGGCCGTTAAGGACCCGATGCGCGTGTGCCTCTTTGCGAGGGCGTTACGCATTTGAAGTGTTTCTCGTTGATATAGCCGAAACCTCCGGACCTCAACCCAAGTCATTTCTTTTATTCATCCATTTCCCGCTGGTAAATATGCTGGGGCGAGCGACCTAAAGGGCCAATTTGGGGGTACGAGTGGACACCAGACACAATTCCTGGTTGAGTATGAAGTCGAACAAGGCAGCTAGCCCCTGGGTCAACAAGAAAGGGTCTTTACAGAAGTCTTACACATCGTTAATACTCACGTAGTTATACGTTACATGCTGTGCGCTCGTTAACAACATATTATCGTCTAGCAGGAAGTGGTTCTTTCTTGTACCTTCCACGGTAGCCTTATGCTGATAAAGGTGACGAGGATCCTCGGCAGCCCCCGAGTTTCTGTGCAGGGCCTCTCTGCCGGACTCGTCCCACCCACAGTTGAGGATCAACCACGAGACTCTTTTGAACAGTATAACAGTGGGTGACGTAGAACGTGCTGTGTCAAAATTTCTATTCAGGAGGTCGTCAGCGCGGTAAAGTGAGCCCGGGATGGGGGGAGCGATAGATAGGCTGGGCGGGGTTATTCTGTTTACTCTGCCCTAATGGAGAGGGGACCCGCCTGAAAATAAAGGGTGTGACTTATGGTCGTGAGCGGTGGGGTCGGTCACCACGACACGGATTTCTGCGGAACCGCTTACCGCATCGAAGAGGATGTCGAACATTTATAGGGAATTAGAAACATACAATCCTCGCTTCGCTTATAGGGGCGCGTCGGGGATGTCGAACTAGCTTGGAACGCAAGGAAAGAGCCCGTTGCCCCGCGCGTCCCCTCAGCTATCAATATTCCGGTAAGCCTTGTAGGTAGTCTAGTGATGCCATCTCACTTTTGATTCTGGAGGCTATTAACGCCGCAGATATTTCAACACAAGACTGTAAATAGGCGGCAGTGTACTGGGCGGTTTATTTGCTTAACTCTATTTGCCGTCCTAGTTCCCCTCGGCTCGTCTCGATTACTGATTCAGCCTTTCACTGACCAAGGCAATCTACGGCTTGGGACGATATTGAGCGCCCCCGCGATGATGAAGAAAGAGTGCAACAGAGTGATAAATGAGATGAAAGCCCGTCGAGACCAGTGTACTTACGACGCACGCTATGACAGCTTTAAGGTCACGCGACGCGTTGAGTCAACCTGCGTGCTAGGATGCATTGCCCATCAGACGTGATTCTGCGCACTTGCACGGTCTGATTGATTTTGGAGCCCCTGCAAAACCGCAGTGTCGTCTCAAGCCTCGACGCCGTTGCCAGGTAATTCTGTCTCGGTCAAGCGTGGGCGCTCCATACGTTCACTCCTCC";
		pattern = "CACTCCTCC";
		d = 4;
		list = approximatePatternMatching(inputAprox, pattern, d);
		System.out.println("Data Set Aproximate Pattern");
		for (Integer integer : list) {
			System.out.print(integer + " ");
		}
		System.out.println("");
		
	}
	
	@Test
	public void testPatternCountD() {
		String input = "CATGCCATTCGCATTGTCCCAGTGA";
		String pattern = "CCC";
		int d = 2;
		System.out.println("Pattern count D");
		System.out.println(aproximatePatternCountD(input, pattern, d));

		input = "TTTAGAGCCTTCAGAGG";
		pattern = "GAGG";
		d = 2;
		System.out.println("Pattern count D Example 2");
		System.out.println(aproximatePatternCountD(input, pattern, d));
		
		input = "ACGGCATCCCCTAGTATCCAAGGGGCTAAAAGAGGGTTGCGTGATGACTGCGTACGGGTTTATTACTAGTTGGACTAATACTTATGACTCGCTCTTACATGAAGTCGGACGGGAAGAGCTCCGGACGTGGGTTACGTTGAGCGGGTGTGAGGCAGGAAGGCGCGCTTTGTCTGTCCTAACATGGCGTGAGATCACCTCAAATGTCTATCTGCGTCTTGGGAAGCAGCTCGAGGTACAATGTTTCTTCTAAAGGAAGGGGCATGCACTAACAAAATGGGTATACTTCCCCCTCAGGGGGGGACGTAACTAGAAAC";
		pattern = "GGACTA";
		d = 3;
		System.out.println("Pattern count D TEST");
		System.out.println(aproximatePatternCountD(input, pattern, d));
	}
	
	@Test
	public void frequentWordsMismatches() {
		String input = "CCCC";
		int k = 4;
		int d = 3;
		
		System.out.println("Frequent word mismatches example");
		List<String> list = frequentWordsMismatches(input, k, d);
		System.out.println("SIZE: " + list.size());
		for (String string : list) {
			System.out.print(string + " ");
		}
		
		
		input = "CACAGTAGGCGCCGGCACACACAGCCCCGGGCCCCGGGCCGCCCCGGGCCGGCGGCCGCCGGCGCCGGCACACCGGCACAGCCGTACCGGCACAGTAGTACCGGCCGGCCGGCACACCGGCACACCGGGTACACACCGGGGCGCACACACAGGCGGGCGCCGGGCCCCGGGCCGTACCGGGCCGCCGGCGGCCCACAGGCGCCGGCACAGTACCGGCACACACAGTAGCCCACACACAGGCGGGCGGTAGCCGGCGCACACACACACAGTAGGCGCACAGCCGCCCACACACACCGGCCGGCCGGCACAGGCGGGCGGGCGCACACACACCGGCACAGTAGTAGGCGGCCGGCGCACAGCC";
		k = 10;
		d = 2;
		System.out.println("APC 1:" + aproximatePatternCountD(input, "GCACACAGAC", d));
		System.out.println("APC 2:" + aproximatePatternCountD(input, "GCGCACACAC", d));
		list = frequentWordsMismatches(input, k, d);
		System.out.println("\nFrequent word mismatches example data set");
		for (String string : list) {
			System.out.print(string + " ");
		}
		
		input = "GGCACTGGCAAATAATAATGGCAGGCATCTGGCAGGCACTGGCAGGCGGCAGGCACTAATGGCAGGCAGGCACTGGCAGGCGGCAATAATAATGGCAACTGGCATCTGGCAATGGCTCTTCTGGCTCTTCTAATGGCAGGCAACTTCTTCTAATGGCATCTTCTGGCAGGCAACTAATGGCAGGCAGGCAAATGGCACTGGCACTAATACTAATTCTGGCATCTACTTCTACTACTGGCGGCACTGGCGGCGGCAGGCTCTGGCGGCGGCACTGGCAGGCAGGCACTTCTTCTGGCGGCACTACTGGCAGGCAATGGCGGCGGCGGCATCTAATTCTTCTACTGGCAACTTCT";
		k = 9;
		d = 2;
		list = frequentWordsMismatches(input, k, d);
		System.out.println("\nFrequent word mismatches TEST data set");
		for (String string : list) {
			System.out.print(string + " ");
		}
		
	}
	
	@Test
	public void frequentWordsMismatchesReverseComplements() {
		String input = "ACGTTGCATGTCGCATGATGCATGAGAGCT";
		int k = 4;
		int d = 1;
		List<String> list = frequentWordsMismatchesReverseComplements(input, k, d);
		System.out.println("\nFrequent word mismatches reverse complements example");
		for (String string : list) {
			System.out.print(string + " ");
		}
		
		input = "CTTGCCGGCGCCGATTATACGATCGCGGCCGCTTGCCTTCTTTATAATGCATCGGCGCCGCGATCTTGCTATATACGTACGCTTCGCTTGCATCTTGCGCGCATTACGTACTTATCGATTACTTATCTTCGATGCCGGCCGGCATATGCCGCTTTAGCATCGATCGATCGTACTTTACGCGTATAGCCGCTTCGCTTGCCGTACGCGATGCTAGCATATGCTAGCGCTAATTACTTAT";
		k = 9;
		d = 3;
		//list = frequentWordsMismatchesReverseComplements(input, k, d);
		System.out.println("\nFrequent word mismatches reverse complements example data set");
		for (String string : list) {
			System.out.print(string + " ");
		}
		
		input = "GCGCATCATCATCTCTGTCTGTTCGTGCGCATCTCATCATGCGCATCTCTGCGCATCATTCGCGCTGTCTTCTCGCGGTGTGTCATTCCATGCGTCTCGCGGTGTCATCATGTCTGCGCATGCGCATCATTCCTGTGTGCGCATTCCATTCTCTCCATGTGCGCTGCGGCGCATTCGCGGCGGCGTCGCGGTTCCATTCGTCATCTGCGGTTC";
		k = 9;
		d = 3;
		list = frequentWordsMismatchesReverseComplements(input, k, d);
		System.out.println("\nFrequent word mismatches reverse complements example data set");
		for (String string : list) {
			System.out.print(string + " ");
		}
	}
	
	@Test
	public void testGenerateKmers() {
		System.out.println(generateKmers(3));
	}
	
	/**
	 * Reads data set from a file
	 * @param dataSetFileName File Name
	 * @return Data set readed as string
	 */
	private String readDataSet(String dataSetFileName) {
		String rto = null;
		BufferedReader br = null;
		InputStream fileIs = null;
		try {
			fileIs = OrigCTest.class.getClassLoader().getResourceAsStream(dataSetFileName);
			br = new BufferedReader(new InputStreamReader(fileIs));
			rto = br.readLine();
		} catch (FileNotFoundException e) {
			Assert.fail("Error reading data set");
		} catch (IOException e) {
			Assert.fail("Error reading data set");
		} finally {
			if (br != null) {
				try {
					fileIs.close();
					br.close();
				} catch (IOException e) {
				}
			}
		}
		return rto;
	}
	
	/**
	 * Pattern count algorithm implementation.
	 * Implementing Pattern Count Algorithm
	 * 
	 * PatternCount(Text, Pattern)
	 *       count = 0
	 *       for i = 0 to |Text| âˆ’ |Pattern|
	 *           if Text(i, |Pattern|) = Pattern
	 *               count = count + 1
	 *       return count
	 *    
	 * @param input Input Stream to be parsed
	 * @param pattern Pattern to be searched
	 * @return The final count
	 */
	private int patternCount(String input, String pattern) {
		int count = 0;
		
		for (int i = 0; i <= input.length() - pattern.length(); i++) {
			if (input.substring(i, i + pattern.length()).equals(pattern)) {
				count++;
			}
			
		}
		return count;
	}
	
	/**
	 * 
	 * @param input
	 * @param pattern
	 * @param d
	 * @return
	 */
	private int aproximatePatternCountD(String input, String pattern, int d) {
		List<Integer> rto = approximatePatternMatching(input, pattern, d);
		return rto.size();
	}

	/**
	 * Implementation of frequent words algorithm
	 * FrequentWords(Text, k)
     *   FrequentPatterns â†� an empty set
     *   for i â†� 0 to |Text| âˆ’ k
     *       Pattern â†� the k-mer Text(i, k)
     *       Count(i) â†� PatternCount(Text, Pattern)
     *   maxCount â†� maximum value in array Count
     *   for i â†� 0 to |Text| âˆ’ k
     *       if Count(i) = maxCount
     *           add Text(i, k) to FrequentPatterns
     *   remove duplicates from FrequentPatterns
     *   return FrequentPatterns
     *   
     * @param input Text input
     * @param k length for parsing input 
	 * @return
	 */
	private List<String> frequentWords(String input, int k) {
		List<String> frequentPatterns = new ArrayList<String>(); 
		int [] count = new int[input.length()];
		int maxCount = 0;
		for (int i = 0; i <= input.length() - k; i++) {
			String pattern = input.substring(i, i + k);
			count[i] = patternCount(input, pattern);
			if (count[i] > maxCount) {
				maxCount = count[i];
			}
		}

		for (int i = 0; i <= input.length() - k; i++) {
			if (count[i] == maxCount) {
				String fp = input.substring(i, i + k);
				if (!frequentPatterns.contains(fp)) {
					frequentPatterns.add(fp);
				}
			}
		}
		return frequentPatterns;
	}
	
	private List<String> frequentWordsMismatches(String input, int k, int d) {
		List<String> frequentPatternsMismatches = new ArrayList<String>(); 
		int maxCount = 0;
		
		// For every possible kmer
		List<String> kmers = generateKmers(k);
		int [] count = new int[kmers.size()];
		for (int i = 0; i < kmers.size(); i++) {
			String pattern = kmers.get(i);
			count[i] = aproximatePatternCountD(input, pattern, d);
			if (count[i] > maxCount) {
				maxCount = count[i];
			}
		}

		for (int i = 0; i < kmers.size(); i++) {
			if (count[i] == maxCount) {
				String fp = kmers.get(i);;
				if (!frequentPatternsMismatches.contains(fp)) {
					frequentPatternsMismatches.add(fp);
				}
			}
		}
		return frequentPatternsMismatches;
	}

	private List<String> frequentWordsMismatchesReverseComplements(String input, int k, int d) {
		List<String> frequentPatternsMismatches = new ArrayList<String>(); 
		int maxCount = 0;
		// For every possible kmer
		List<String> kmers = generateKmers(k);
		int [] count = new int[kmers.size()];
		for (int i = 0; i < kmers.size(); i++) {
			StringBuffer patternSb = new StringBuffer(kmers.get(i));
			String pattern = patternSb.toString();
			String patternReverseComplement = reverseComplementPattern(pattern);
			count[i] = aproximatePatternCountD(
					input, pattern, d) + aproximatePatternCountD(input, patternReverseComplement, d);
			if (count[i] > maxCount) {
				maxCount = count[i];
			}
		}

		for (int i = 0; i < kmers.size(); i++) {
			if (count[i] == maxCount) {
				String fp = kmers.get(i);
				if (!frequentPatternsMismatches.contains(fp)) {
					frequentPatternsMismatches.add(fp);
				}
			}
		}
		return frequentPatternsMismatches;
	}
	
	/**
	 * A complement is T
	 * C complement is G
	 * 
	 * Find reverse complement in a stream
	 * @param pattern To be used as initial stream
	 * @return The reverse complement of pattern
	 */
	public static String reverseComplementPattern(String pattern) {
		Map<String, String> complements = new HashMap<String, String>();
		complements.put("A", "T");
		complements.put("T", "A");
		complements.put("C", "G");
		complements.put("G", "C");
		
		StringBuffer complement = new StringBuffer("");
		for (int i = 0; i < pattern.length(); i++) {
			complement.append(complements.get("" + pattern.charAt(i)));
		}
		complement.reverse();
		return complement.toString();
		
	}
	
	/**
	 * 
	 * @param input String to be parsed
	 * @param pattern pattern to be found
	 * @return List of positions where the pattern occurs in the input string.
	 */
	private List<Integer> patternMatching(String input, String pattern) {
		List<Integer> rto = new ArrayList<Integer>();
		
		boolean finish = false;
		int currentIndex = 0;
		while (!finish) {
			int occurs = input.indexOf(pattern, currentIndex);
			if (occurs >= 0) {
				rto.add(occurs);
				currentIndex = occurs + 1;
			} else {
				finish = true;
			}
		}
		return rto;
	}
	
	/**
	 * 
	 * @param input String to be parsed
	 * @param pattern pattern to be found
	 * @param d mismatch lenght allowed
	 * @return List of positions where the approximate pattern occurs in the input string.
	 */
	private List<Integer> approximatePatternMatching(String input, String pattern, int d) {
		List<Integer> rto = new ArrayList<Integer>();
		
		for (int i = 0; i <= input.length() - pattern.length(); i++) {
			if (hammingDistance(input.substring(i, i + pattern.length()), pattern) <= d) {
				rto.add(i);
			}
			
		}

		return rto;
	}
	
	/**
	 * Finds all distinct k-mers forming (L, t)-clumps in a genome (input) 
	 * @param input
	 * @param L Window size
	 * @param k K-mers pattern size
	 * @param t Minimum times that element occurs in window
	 * @return List of k-mers
	 */
	private List<String> clumpFinding(String input, int L, int K, int t) {
		List<String> rto = new ArrayList<String>();
		
		int l0 = 0; 
		int l1 = l0 + L;

		// Loop through windows of size L
		while (l1 < input.length()) {
			String window = input.substring(l0, l1);
			
			int k0 = l0;
			int k1 = k0 + K;
			// Loop all possible patterns
			while (k1 <= l1) {
				String pattern = input.substring(k0, k1);
				
				if (patternCount(window, pattern) >= t) {
					if (!rto.contains(pattern)) {
						rto.add(pattern);
					}
				}
				k0++;
				k1++;
			}
			l0++;
			l1++;
		}
		return rto;
	}
	
	/**
	 * Returns all Skew for a genome from 0 to K (included)
	 * @param gnome
	 * @param k
	 * @return
	 */
	private List<Integer> findMinimumSkew(String gnome) {
		List<Integer> rto = new ArrayList<Integer>();
		// recSkew(rto, "A" + gnome, 0, gnome.length());
		itSkew(rto, "A" + gnome, gnome.length());
		
		List<Integer> minimums = new ArrayList<Integer>();
		// find minimum 
		int minimum = 0;
		for (Integer integer : rto) {
			if (integer < minimum) {
				minimum = integer;
			}
		}
		for (int i = 0; i < rto.size(); i++) {
			if (rto.get(i) == minimum) {
				minimums.add(i);
			}
		}
		
		return minimums;
	}

	/**
	 * Returns all Skew for a genome from 0 to K (included)
	 * @param gnome
	 * @param k
	 * @return
	 */
	private List<Integer> findMaxumumSkew(String gnome) {
		List<Integer> rto = new ArrayList<Integer>();
		// recSkew(rto, "A" + gnome, 0, gnome.length());
		itSkew(rto, "A" + gnome, gnome.length());
		
		List<Integer> minimums = new ArrayList<Integer>();
		// find minimum 
		int minimum = 0;
		for (Integer integer : rto) {
			if (integer > minimum) {
				minimum = integer;
			}
		}
		for (int i = 0; i < rto.size(); i++) {
			if (rto.get(i) == minimum) {
				minimums.add(i);
			}
		}
		
		return minimums;
	}
	/**
	 * Returns all Skew for a genome from 0 to K (included)
	 * @param gnome
	 * @param k
	 * @return
	 */
	private List<Integer> skew(String gnome, int k) {
		if (k > gnome.length()) {
			throw new IllegalArgumentException("Invalid value of K");
		}
		
		List<Integer> rto = new ArrayList<Integer>();
		recSkew(rto, "A" + gnome, 0, k);
		
		return rto;
	}
	
	private void recSkew(List<Integer> list, String gnome, int index, int k) {
		if (index == 0) {
			list.add(0, 0);
		} else {
			if ("C".equals("" + gnome.charAt(index))) {
				list.add(index, list.get(index-1) - 1);
			} else if ("G".equals("" + gnome.charAt(index))) {
				list.add(index, list.get(index-1) + 1);
			} else {
				list.add(index, list.get(index-1));
			}
		}
		
		if (k == index) {
			return;
		} else {
			recSkew(list, gnome, index + 1, k);
		}
	}
	
	private void itSkew(List<Integer> list, String gnome, int k) {
		list.add(0, 0);
		
		for (int index = 1; index < gnome.length(); index++) {
			if ("C".equals("" + gnome.charAt(index))) {
				list.add(index, list.get(index-1) - 1);
			} else if ("G".equals("" + gnome.charAt(index))) {
				list.add(index, list.get(index-1) + 1);
			} else {
				list.add(index, list.get(index-1));
			}
		}
	}
	
	/**
	 * 
	 * @param a String a
	 * @param b String b
	 * @return Number of mismatches between a and b strings
	 */
	private int hammingDistance(String a, String b) {
		if (a.length() != b.length()) {
			throw new IllegalArgumentException("Invalid strings parameters");
		}

		int rto = 0;
		for (int i = 0; i < a.length(); i++) {
			if (a.charAt(i) != b.charAt(i)) {
				rto++;
			}
		}
		
		return rto;
	}
	
	private List<String> generateKmers(int l) {
		String [] possibleValues = {"A", "C", "G", "T"};
		//String [] 
		List<String> rto = new ArrayList<String>();
		
		kmers(rto, "", "", l);
		return rto;
	}

	private void kmers(List<String> rto, String current, String newValue, int l) {
		current = current + newValue;
		if (current.length() == l) {
			rto.add(current);
			return;
		}
		
		kmers(rto, current, "A", l);
		kmers(rto, current, "C", l);
		kmers(rto, current, "G", l);
		kmers(rto, current, "T", l);
	}
}

